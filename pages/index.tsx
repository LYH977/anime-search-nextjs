import Head from 'next/head'
import { Inter } from '@next/font/google'
import { AnimeCard } from 'features/AnimeSearch/components'
import { useAnimeList } from 'features/AnimeSearch/hooks'
import { ChangeEvent, useState } from 'react'
import { Pagination, SearchBar } from 'components'
import { useDebouncedCallback } from 'use-debounce';
import { AnimeFilterResultsProps, AnimeFullResultsProps, AnimeRecommendationResponseProps, } from 'features/AnimeSearch/types'
import { useRouter } from 'next/router'

const inter = Inter({ subsets: ['latin'] })

export async function getServerSideProps({ req, res, resolvedUrl }: any) {


  const queryParam = resolvedUrl.match(/q=[^&]*(&|$)/)
  if (queryParam) {
    const query = queryParam[0].slice(2).replace('&', '')
    const queryResponse = await fetch(`https://api.jikan.moe/v4/anime?q=${query}&page=1`)
    const queryResult: AnimeFullResultsProps = await queryResponse.json()
    return {
      props: {
        totalPages: queryResult.pagination.last_visible_page,
        animes: queryResult.data.map((anime) => ({
          imageUrl: anime.images.jpg.large_image_url,
          mal_id: anime.mal_id,
          title: anime.title_english ?? anime.title,
        })),
      }
    }


  }
  const data: any = []

  const response = await fetch('https://api.jikan.moe/v4/recommendations/anime')
  const animes: AnimeRecommendationResponseProps = await response.json()
  for (const temp of animes.data.slice(0, 10)) {
    console.log(temp.entry)
    temp.entry.forEach((x) => {
      data.push({
        mal_id: x.mal_id,
        title: x.title,
        imageUrl: x.images.jpg.large_image_url
      })
    })

  }
  return {
    props: {
      animes: data,
      totalPages: 0
    }
  }



}


export default function Home(serverProps: AnimeFilterResultsProps) {
  const router = useRouter()
  const [query, setQuery] = useState(() => {
    const initialQuery = router.query.q
    if (Array.isArray(initialQuery)) {
      return initialQuery[0]
    }
    return initialQuery ?? ''
  })
  console.log({ query })
  const [page, setPage] = useState(1)
  const { data: clientData, isLoading, isFetching } = useAnimeList(query, page, serverProps)
  const myData = clientData ?? serverProps
  const resultText = myData.animes.length > 0 ? `Results for "${query}"` : `No Results for "${query}"`
  const heading = clientData ? resultText : 'Recommendation'

  // console.log({ clientData, serverProps, data: myData })

  const debounced = useDebouncedCallback(value => {
    if (value) {
      setQuery(value)
      setPage(1)
      router.push(`/?q=${value}`, undefined, { shallow: true })
    }

  }, 500)
  const updateQuery = (e: ChangeEvent<HTMLInputElement>) => {
    debounced(e.target.value)
  }


  return (
    <>
      <Head>
        <title>Anime Next</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='mx-auto px-4 pb-4 center flex-col max-w-5xl'>

        <SearchBar placeholder="Search Animes..."
          onChange={ updateQuery } id='searchBar' defaultValue={ query }
        />

        <div>
          { isFetching ? 'LOADING...' : heading }

        </div>

        <div className='grid gap-8 py-4 mt-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4' >
          { myData.animes.map(({ title, mal_id, imageUrl }, index) =>
          (
            <AnimeCard key={ mal_id } id={ mal_id } title={ title } imageUrl={ imageUrl } />
          )
          ) }
        </div>

        { myData.totalPages > 0 && myData.animes.length > 0 && <Pagination currentPage={ page } totalPages={ myData.totalPages } setPage={ setPage } /> }
      </main>
    </>
  )
}
