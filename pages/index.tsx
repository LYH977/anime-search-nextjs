import Head from 'next/head'
import { Inter } from '@next/font/google'
import results from '@/data/animeList.json'
import { AnimeCard } from 'features/AnimeSearch/components'
import { useAnimeList } from 'features/AnimeSearch/hooks'
import { ChangeEvent, useEffect, useRef, useState } from 'react'
import { Pagination, SearchBar } from 'components'
import { useDebouncedCallback } from 'use-debounce';
import { fetchRecomendedAnimes } from 'features/AnimeSearch/services'
import { AnimeRecommendationProps, AnimeSingleResultProps } from 'features/AnimeSearch/types'
import { useRouter } from 'next/router'

const inter = Inter({ subsets: ['latin'] })

export async function getServerSideProps({ req, res, resolvedUrl }: any) {
  const data = []
  const response = await fetch('https://api.jikan.moe/v4/recommendations/anime')
  const animes = await response.json()
  // const router = useRouter()
  console.log(resolvedUrl)

  for (const temp of animes.data) {
    data.push(...temp.entry)
  }



  return {
    props: {
      animes: data.slice(0, 10)
    }
  }
}


export default function Home(props: {
  animes: Pick<
    AnimeSingleResultProps,
    'mal_id' | 'images' | 'title' | 'url'
  >[]
}) {
  const [query, setQuery] = useState('')
  const [page, setPage] = useState(1)
  const { data, isLoading, isFetching, isInitialLoading } = useAnimeList(query, page)
  // console.log({ data })
  // const animes = results.data
  const animes = data?.data ?? props.animes
  console.log({ data, props })

  const debounced = useDebouncedCallback(value => {
    if (value)
      setQuery(value)
  }, 500)
  const updateQuery = (e: ChangeEvent<HTMLInputElement>) => {
    debounced(e.target.value)
  }


  return (
    <>
      <Head>
        <title>Anime Next</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='mx-auto px-4 pb-4 center flex-col max-w-5xl'>

        <SearchBar placeholder="Search Animes..."
          onChange={ updateQuery } id='searchBar'
        />
        <div>
          { isLoading ? 'is loading true' : 'is loading false' }

        </div>
        <div>
          { isFetching ? 'isFetching true' : 'isFetching false' }

        </div>
        <div>
          { isInitialLoading ? 'isInitialLoading true' : 'isInitialLoading false' }

        </div>
        <div className='grid gap-8 py-4 mt-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4' >
          { animes.map(({ title, mal_id, images: { jpg: { large_image_url } } }, index) =>
          (
            <AnimeCard key={ index } id={ mal_id } title={ title } imageUrl={ large_image_url } />
          )
          ) }
        </div>


        { data && <Pagination currentPage={ page } totalPages={ data.pagination.last_visible_page } setPage={ setPage } /> }
      </main>
    </>
  )
}
